apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        def SERVER_URL = "SERVER_URL"
        def SECRET_KEY = "SECRET_KEY"
        def CONFIG = { k -> "\"${project.properties.get(k)}\"" }
        debug {
            minifyEnabled false
            shrinkResources false
            useProguard false
            buildConfigField "String", SERVER_URL, CONFIG("debug.server.url")
            buildConfigField "String", SECRET_KEY, CONFIG("darksky.secret.key")
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            buildConfigField "String", SERVER_URL, CONFIG("release.server.url")
            buildConfigField "String", SECRET_KEY, CONFIG("darksky.secret.key")
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    configuration ->
        configuration.implementation fileTree(dir: 'libs', include: ['*.jar'])
        kotlin(configuration)
        test(configuration)
        dagger(configuration)
        retrofit(configuration)
        reactive(configuration)
        support(configuration)
}

static void support(configuration) {
    configuration.implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    configuration.implementation 'androidx.core:core-ktx:1.1.0-alpha03'
    configuration.implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
}

static void reactive(configuration) {
    def rxjava = "2.2.2"
    def rxandroid = "2.1.0"
    configuration.implementation "io.reactivex.rxjava2:rxandroid:$rxandroid"
    configuration.implementation "io.reactivex.rxjava2:rxjava:$rxjava"
    configuration.implementation "io.reactivex.rxjava2:rxkotlin:$rxandroid"
}

static void kotlin(configuration) {
    def kotlin_version = '1.3.20'
    configuration.implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

static void test(configuration) {
    configuration.testImplementation 'junit:junit:4.12'
    configuration.androidTestImplementation 'androidx.test:runner:1.1.1'
    configuration.androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

static void dagger(configuration) {
    def dagger = '2.13'
    configuration.implementation "com.google.dagger:dagger:$dagger"
    configuration.kapt "com.google.dagger:dagger-compiler:$dagger"
}

static void retrofit(configuration) {
    def retrofit = '2.3.0'
    configuration.implementation "com.squareup.retrofit2:retrofit:$retrofit"
    configuration.implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    configuration.implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    configuration.implementation 'com.google.code.gson:gson:2.8.5'
    configuration.compileOnly 'org.glassfish:javax.annotation:10.0-b28'
}
